{"version":3,"sources":["components/search.jsx","components/generate.jsx","components/display.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","type","name","placeholder","id","Component","Generate","onClick","handleRandom","handleTrending","Display","renderImages","handleDisplay","map","i","key","src","url","srcSet","concat","url_fw","sizes","alt","ref","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSearch","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","query","json","arr","wrap","_context","prev","next","preventDefault","target","elements","value","replace","fetch","then","response","sent","console","log","data","length","push","images","original","fixed_width","setState","urls","stop","_x","apply","arguments","getTrending","_callee2","_context2","getRandom","_callee3","_context3","state","components_search","components_generate","components_display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16d0cb7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './search.css';\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <input type=\"text\" name=\"query\" placeholder=\"Search GIFs\" id=\"search-field\"/>\r\n          <button id=\"search-btn\">Find</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport './generate.css';\r\n\r\nclass Generate extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"generate\">\r\n        <button className=\"gen-btn\" onClick={this.props.handleRandom}>Generate a random GIF</button>\r\n        <button className=\"gen-btn\" onClick={this.props.handleTrending}>Generate Trending GIFs</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generate;\r\n","import React, { Component } from 'react';\r\nimport './display.css';\r\n\r\nclass Display extends Component {\r\n\r\n  // componentDidMount() {\r\n  //   this.props.handleDisplay\r\n  //     .forEach(i => {\r\n  //       var img = document.createElement('img');\r\n  //       img.src = i;\r\n  //       //img.height = \"150\";\r\n  //       //img.width = \"150\";\r\n  //       img.className = \"display-gif\";\r\n  //       this.refs.display.appendChild(img);\r\n  //     })\r\n  // }\r\n\r\n  render() {\r\n    var urls = this.props.handleDisplay\r\n    var renderImages = urls.map((i) => {\r\n      return (\r\n        <div key={i.key}>\r\n          <img src={i.url} srcSet={`${i.url_fw} 480w, ${i.url} 1800w`} sizes={`(max-width: 800px) 800px, 1800px`} alt=\"Giphy\"/>\r\n        </div>\r\n      )\r\n      \r\n      // React.createElement(\r\n      //   \"div\",\r\n      //   null,\r\n      //   React.createElement(\"img\", {\r\n      //     src: i,\r\n      //     alt: \"Giphy\" }),\r\n      // );\r\n    });\r\n    \r\n    return (\r\n      <div className=\"display\" ref=\"display\">\r\n        {renderImages}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Search from './components/search';\r\nimport Generate from './components/generate';\r\nimport Display from './components/display';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      urls: []\r\n    }\r\n  }\r\n\r\n  getSearch = async (e) => {\r\n    // Prevent page from refreshing\r\n    e.preventDefault()\r\n    // Replace spaces with '+'\r\n    const query = (e.target.elements.query.value).replace(/\\s/g, '+');\r\n    // Fetch data from API\r\n    const json = await fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=dV4458Zz6uvL4aZybeNPkgaS0lJhpwiZ`).then(response => response.json());\r\n    console.log(json);\r\n    // Assign unique keys to urls from returned data\r\n    const arr = [];\r\n    for (let i = 0; i < json.data.length; i++) {\r\n      arr.push(\r\n        {\r\n          url : [json.data[i].images.original.url],\r\n          url_fw : [json.data[i].images.fixed_width.url],\r\n          key : [json.data[i].id]\r\n        });\r\n    }\r\n    this.setState({\r\n      urls: arr\r\n    })\r\n  }\r\n\r\n  getTrending = async() => {\r\n    // Fetch data from API\r\n    const json = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=dV4458Zz6uvL4aZybeNPkgaS0lJhpwiZ`).then(response => response.json());\r\n    console.log(json);\r\n    // Assign unique keys to urls from returned data\r\n    const arr = [];\r\n    for (let i = 0; i < json.data.length; i++) {\r\n      arr.push(\r\n        {\r\n          url : [json.data[i].images.original.url],\r\n          url_fw : [json.data[i].images.fixed_width.url],\r\n          key : [json.data[i].id]\r\n        });\r\n    }\r\n    this.setState({\r\n      urls: arr\r\n    })\r\n  }\r\n\r\n  getRandom = async() => {\r\n    // Fetch data from API\r\n    const json = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=dV4458Zz6uvL4aZybeNPkgaS0lJhpwiZ`).then(response => response.json());;\r\n    console.log(json);\r\n    // Push urls from returned data into array\r\n    const arr = [];\r\n    arr.push(\r\n        {\r\n          url : [json.data.images.original.url],\r\n          url_fw : [json.data.images.fixed_width.url],\r\n          key : [json.data.id]\r\n        });\r\n    this.setState({\r\n      urls: arr\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"title\">GIPHY API presents.... GIFME!</h1>\r\n        <p id=\"instructions\">Click one of the buttons below to start generating GIFs</p>\r\n        <Search className=\"search\" handleSubmit={this.getSearch}/>\r\n        <Generate className=\"generate\" handleTrending={this.getTrending} handleRandom={this.getRandom}/>\r\n        <Display handleDisplay={this.state.urls}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}