{"version":3,"sources":["components/search.jsx","components/generate.jsx","components/display.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","react_default","a","createElement","className","onSubmit","this","props","handleSubmit","type","name","placeholder","id","Component","Generate","onClick","handleRandom","handleTrending","Display","renderImages","handleDisplay","map","i","React","src","alt","ref","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSearch","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","query","api_call","json","arr","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","console","log","data","length","push","images","original","url","setState","items","stop","_x","apply","arguments","getTrending","_callee2","_context2","getRandom","_callee3","_context3","state","components_search","components_generate","components_display","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5bbc599.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './search.css';\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          <input type=\"text\" name=\"query\" placeholder=\"Search GIFs\" id=\"search-field\"/>\r\n          <button id=\"search-btn\">Find</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport './generate.css';\r\n\r\nclass Generate extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"generate\">\r\n        <button className=\"gen-btn\" onClick={this.props.handleRandom}>Generate a random GIF</button>\r\n        <button className=\"gen-btn\" onClick={this.props.handleTrending}>Generate Trending GIFs</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Generate;\r\n","import React, { Component } from 'react';\r\nimport './display.css';\r\n\r\nclass Display extends Component {\r\n\r\n  // componentDidMount() {\r\n  //   this.props.handleDisplay\r\n  //     .forEach(i => {\r\n  //       var img = document.createElement('img');\r\n  //       img.src = i;\r\n  //       //img.height = \"150\";\r\n  //       //img.width = \"150\";\r\n  //       img.className = \"display-gif\";\r\n  //       this.refs.display.appendChild(img);\r\n  //     })\r\n  // }\r\n\r\n  render() {\r\n    var images = this.props.handleDisplay\r\n    var renderImages = images.map((i) => {\r\n      return React.createElement(\r\n        \"div\",\r\n        null,\r\n        React.createElement(\"img\", {\r\n          src: i,\r\n          alt: \"Giphy\" }),\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"display\" ref=\"display\">\r\n        {renderImages}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './components/search';\nimport Generate from './components/generate';\nimport Display from './components/display';\n\nconst API_KEY = 'dV4458Zz6uvL4aZybeNPkgaS0lJhpwiZ';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      items: [],\n    }\n  }\n\n  getSearch = async (e) => {\n    e.preventDefault()\n    const query = e.target.elements.query.value;\n    const api_call = await fetch(`https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${API_KEY}`);\n    const json = await api_call.json();\n    console.log(json);\n    const arr = [];\n    for (let i = 0; i < json.data.length; i++) {\n      arr.push(json.data[i].images.original.url);\n    }\n    this.setState({\n      items: arr\n    })\n  }\n\n  getTrending = async() => {\n    const api_call = await fetch(`https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}`);\n    const json = await api_call.json();\n    console.log(json);\n    const arr = [];\n    for (let i = 0; i < json.data.length; i++) {\n      arr.push(json.data[i].images.original.url);\n    }\n    this.setState({\n      items: arr\n    })\n  }\n\n  getRandom = async() => {\n    const api_call = await fetch(`https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}`);\n    const json = await api_call.json();\n    console.log(json);\n    const arr = [];\n    arr.push(json.data.images.original.url);\n    this.setState({\n      items: arr\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">GIPHY API presents.... GIFME!</h1>\n        <p id=\"instructions\">Click one of the buttons below to start generating GIFs</p>\n        <Search className=\"search\" handleSubmit={this.getSearch}/>\n        <Generate className=\"generate\" handleTrending={this.getTrending} handleRandom={this.getRandom}/>\n        <Display handleDisplay={this.state.items}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}